# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Profile implements Node & TimeStamps {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String
  lastName: String
  email: String!
}

interface Node {
  _id: ID!
}

interface TimeStamps {
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LoginPayload {
  authToken: String!
  profile: Profile!
}

type Query {
  posts(searchInput: SearchPostsInput!): [Post!]!
  post(_id: ID!): Post!
  users(input: SearchUsersInput): [User!]!
  user(input: SearchUserInput!): User
  comments(searchInput: SearchCommentsInput!): [Comment!]!
  comment(_id: ID!): Comment
  ping: String!
  whoAmI: User!
}

type Post implements Node & TimeStamps {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  status: PostStatus!
  userId: ID!
  comments(searchInput: SearchCommentsInputNoID): [Comment!]!
}

enum PostStatus {
  NotStarted
  InProgress
  Completed
  NotCompleted
}

type Comment implements Node & TimeStamps {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  postId: ID!
  body: String!
  userId: ID!
}

input SearchCommentsInputNoID {
  limit: Float = 10
  offset: Float = 0
}

input SearchPostsInput {
  userId: ID!
  limit: Float = 10
  offset: Float = 0
}

type User implements Node & TimeStamps {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
}

input SearchUsersInput {
  firstName: String
  lastName: String
  limit: Float = 10
  offset: Float = 0
}

input SearchUserInput {
  _id: String
  firstName: String
  lastName: String
  email: String
}

input SearchCommentsInput {
  postId: ID!
  limit: Float = 10
  offset: Float = 0
}

type Mutation {
  createPost(createPostInput: CreatePostInput!): Post!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  removePost(_id: ID!): Post!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(_id: ID!): User!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(_id: ID!): Comment!
  echo(message: String!): String!
  register(registerInput: CreateUserInput!): LoginPayload!
  login(email: String!, password: String!): LoginPayload!
}

input CreatePostInput {
  title: String!
  description: String!
}

input UpdatePostInput {
  title: String
  description: String
  _id: ID!
  status: PostStatus!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
  _id: ID!
}

input CreateCommentInput {
  postId: ID!
  body: String!
}

input UpdateCommentInput {
  _id: ID!
  body: String!
}